import pygame
from constants import SCREEN_NAMES, GAME_CONSTANTS
from utils import Ranking, Screen
from game_utils import MeditatingNinja, Panel, ShurikenController, EnemyNinjaController, CollisionController


class Game(Screen):
    '''
    Defines the game screen. Inherits screen methods from a parent
    class. Every frame of this screen is generated by running the
    function render_frame once.
    '''

    def __init__(self, name='', is_easy=False):
        '''
        Initializes parent class attributes, stops menu music from
        playing and plays game music, instanciates all objects that
        will appear on the game screen.

        Args:
            name (string): name of the player, optional
            is_easy (bool): difficulty of the game, defaults to hard (is_easy=False)
        '''
        super().__init__(name)

        pygame.mixer.music.stop()
        pygame.mixer.music.load('music/game_soundtrack.wav')
        pygame.mixer.music.play(-1)

        self.gate_image = GAME_CONSTANTS['GATE_IMAGE']

        self.meditating_ninja = MeditatingNinja()

        self.panel = Panel(is_easy)

        self.shuriken_controller = ShurikenController(self.panel)

        # Spawn time between enemies vary with difficulty
        spawn_interval = 5000 if is_easy else 1500
        self.enemy_ninja_controller = EnemyNinjaController(spawn_interval)

        self.collision_controller = CollisionController(
            self.meditating_ninja, self.shuriken_controller, self.enemy_ninja_controller, self.panel, self.on_game_over
        )

    def on_game_over(self):
        '''
        Saves the user's score to the high scores textfile,
        sets up a redirection to the menu, stops the screen 
        from running, and changes to the menu's music
        '''
        ranking = Ranking('high_scores.txt')
        ranking.new_record(self.name, self.panel.score)

        self.set_next_screen(SCREEN_NAMES[0])

        self.stop_running()

        pygame.mixer.music.stop()
        pygame.mixer.music.load('music/music_calm.wav')
        pygame.mixer.music.play(-1)

    def render_frame(self):
        '''Renders one frame of the game on a pygame display'''
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.stop_running()

            if event.type == pygame.USEREVENT:
                self.enemy_ninja_controller.spawn_enemy_ninjas()

            if event.type == pygame.KEYDOWN:
                self.panel.process_keyboard(event.key)
                self.shuriken_controller.process_keyboard(event.key)

        self.screen.fill([255, 255, 255])

        self.meditating_ninja.render(self.screen)

        self.screen.blit(self.gate_image, [105, 105])

        self.panel.render(self.screen)

        self.shuriken_controller.render(self.screen)

        self.enemy_ninja_controller.render(self.screen)

        self.collision_controller.scan_for_collisions()

        pygame.display.update()


class HardGame(Game):
    '''Defines game with difficulty set to hard. Enemies spawn faster, and player gets more points'''

    def __init__(self, name=''):
        super().__init__(name, is_easy=False)


class EasyGame(Game):
    '''Defines game with difficulty set to easy. Enemies spawn slower, and player gets less points'''

    def __init__(self, name=''):
        super().__init__(name, is_easy=True)
